set nocompatible
filetype off
" installed plugins {{{
call plug#begin('~/.vim/plugged')
Plug 'airblade/vim-gitgutter'
Plug 'AndrewRadev/linediff.vim'
Plug 'astrangerloop/neverland-vim-theme'
Plug 'ayu-theme/ayu-vim'
Plug 'Chiel92/vim-autoformat'
Plug 'chrisbra/SudoEdit.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'danro/rename.vim'
Plug 'easymotion/vim-easymotion'
Plug 'edkolev/tmuxline.vim'
Plug 'elzr/vim-json'
Plug 'ervandew/supertab'
Plug 'hail2u/vim-css3-syntax'
Plug 'hzchirs/vim-material'
Plug 'itspriddle/ZoomWin'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'jreybert/vimagit'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'kshenoy/vim-signature'
Plug 'majutsushi/tagbar'
Plug 'mattn/emmet-vim'
Plug 'mattn/webapi-vim'
Plug 'mbbill/undotree'
Plug 'morhetz/gruvbox'
Plug 'nightsense/simplifysimplify'
Plug 'nightsense/stellarized'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'pangloss/vim-javascript'
Plug 'plasticboy/vim-markdown'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
Plug 'rhysd/clever-f.vim'
Plug 'roxma/vim-paste-easy'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'Valloric/YouCompleteMe'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/matchit.zip'
Plug 'vim-scripts/YankRing.vim'
Plug 'vim-syntastic/syntastic'
Plug 'Yggdroot/indentLine'
call plug#end()
" }}}

" {{{
if !empty(glob("/usr/share/vim/google/default.vim"))
  source /usr/share/vim/google/default.vim
endif
" }}}

set noerrorbells
set novisualbell
set t_vb=
set tm=500
set wildignore=*.o,*.class,*.pyc
set wildmenu
set ruler
set ignorecase
set smartcase
set hlsearch
set incsearch
set colorcolumn=80
set nobackup
set lazyredraw
set cursorline
set cursorcolumn
set nu
set relativenumber
set magic
set showmatch
set mat=2
set backspace=2
set ffs=unix,dos,mac
set grepprg=rg\ --vimgrep
" cache settings {{{
set backupdir=~/.vimfile/backup//
set directory=~/.vimfile/swap//
set undodir=~/.vimfile/undo//
set noswapfile
" }}}
" encoding {{{
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,big5,gb2312,latin1
" }}}
syntax on
if $COLORTERM == 'gnome-terminal'
  set t_Co=256
endif
if has('gui_running')
  set t_Co=256
  set background=light
else
  set background=dark
endif
" Tab Setting {
set smarttab
set shiftwidth=2
set tabstop=2
set softtabstop=2
set expandtab
inoremap <S-Tab> <C-V><Tab>
" }
set autoindent
set smartindent
set wrap
set list
set listchars=tab:→\ ,trail:·,nbsp:¬,precedes:«,extends:»
set laststatus=2

" custom mappings {{{
let mapleader=" "
let g:mapleader=" "
noremap 0 ^
noremap ^ 0
" visual up/down move
nnoremap j gj
nnoremap k gk
" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
" shift between tabs
map <S-H> gT
map <S-L> gt
noremap <Leader>w :w<CR>
" redraw
noremap <leader>r :redraw!<CR>
" open quickfix/location-list window
noremap <leader>q :cwindow<CR>
noremap <leader>c :lwindow<CR>
" }}}

" cscope commands {{{
command Cs !cscope -Rbqk
set cscopetag
set csto=0

if filereadable("cscope.out")
   cs add cscope.out
elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
endif
set cscopeverbose

" Silent the cscope update infomration on every save
let g:cscope_silent = 1

nmap <Leader>fs :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>fg :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>fc :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>ft :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>fe :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>ff :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <Leader>fi :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <Leader>fd :cs find d <C-R>=expand("<cword>")<CR><CR>

" }}}

" filetype settings {{{
au BufNewFile,BufRead Dockerfile.* set filetype=dockerfile
au BufNewFile,BufRead *.log,*_log,dmesg,log :set filetype=log
au BufNewFile,BufRead Makefile.*,toolchain.inc :set filetype=make
au FileType python set shiftwidth=2 tabstop=2 softtabstop=2 expandtab
au FileType sh set shiftwidth=2 tabstop=2 softtabstop=2 expandtab
au FileType c,cpp,make,ld set shiftwidth=8 tabstop=8 softtabstop=8 noexpandtab
au FileType json set shiftwidth=2 tabstop=2 softtabstop=2 expandtab
" }}}

" airblade/vim-gitgutter {{{
function! NextHunkAllBuffers()
  let line = line('.')
  GitGutterNextHunk
  if line('.') != line
    return
  endif

  let bufnr = bufnr('')
  while 1
    bnext
    if bufnr('') == bufnr
      return
    endif
    if !empty(GitGutterGetHunks())
      normal! 1G
      GitGutterNextHunk
      return
    endif
  endwhile
endfunction

function! PrevHunkAllBuffers()
  let line = line('.')
  GitGutterPrevHunk
  if line('.') != line
    return
  endif

  let bufnr = bufnr('')
  while 1
    bprevious
    if bufnr('') == bufnr
      return
    endif
    if !empty(GitGutterGetHunks())
      normal! G
      GitGutterPrevHunk
      return
    endif
  endwhile
endfunction

nmap <Leader>N :call NextHunkAllBuffers()<CR>
nmap <Leader>M :call PrevHunkAllBuffers()<CR>
nmap <Leader>n  <Plug>GitGutterNextHunk<CR>
nmap <Leader>m  <Plug>GitGutterPrevHunk<CR>
nmap <Leader>gt :GitGutterToggle<CR>
nmap <Leader>ga <Plug>GitGutterStageHunk
nmap <Leader>gr <Plug>GitGutterUndoHunk
" Update signs on saving
autocmd BufWritePost * GitGutter
" }}}
"
" NeoSolarized {{{
" let g:gruvbox_italic=1
" let g:gruvbox_termcolors=16
color gruvbox
" hi cursorline ctermbg=8
hi colorcolumn ctermbg=238
" }}}

" NeoSolarized {{{

" set termguicolors
" let g:neosolarized_visibility = "normal"
" let g:neosolarized_contrast = "normal"
" let g:neosolarized_bold = 1
" let g:neosolarized_underline = 1
" let g:neosolarized_italic = 1
" colorscheme NeoSolarized
" }}}

" altercation/vim-colors-solarized {{{
" syntax enable
" let g:solarized_visibility = 'default'
" let g:solarized_termcolors = 256
" let g:solarized_bold=1
" let g:solarized_italic=1
" let g:solarized_underline=1
" let g:solarized_contrast="high"
" let g:solarized_visibility="high"
" set termguicolors
" set background=dark
" colorscheme solarized
" hi cursorline ctermbg=235
" hi colorcolumn ctermbg=236
" }}}

" Plug PaperColor {{{
" let g:PaperColor_Theme_Options = {
"   \   'theme': {
"   \     'default': {
"   \       'transparent_background': 0,
"   \       'allow_bold': 1,
"   \       'allow_italic': 1
"   \     }
"   \   },
"   \   'language': {
"   \     'python': {
"   \       'highlight_builtins' : 1
"   \     },
"   \     'cpp': {
"   \       'highlight_standard_library': 1
"   \     },
"   \     'c': {
"   \       'highlight_builtins' : 1
"   \     }
"   \   }
"   \ }
" set termguicolors
" colorscheme PaperColor
" hi Cursorline term=none cterm=none
" }}}

" Plug deus{{{
" set t_Co=256
" set termguicolors
" let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
" let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
" set background=dark " Setting dark mode
" colorscheme deus
" let g:deus_termcolors=256
" }}}

" Plug solarized8 {{{
" let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
" let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
" set background=dark
" colorscheme solarized8_high
" }}}

" Chiel92/vim-autoformat {{{
let g:formatdef_yapf = "'yapf --style=\"{based_on_style:chromium,indent_width:'.&shiftwidth.(&textwidth ? ',column_limit:'.&textwidth : '').',ALLOW_MULTILINE_LAMBDAS: true, I18N_FUNCTION_CALL: func_not__exist}\" -l '.a:firstline.'-'.a:lastline"
let g:formatters_c=['clangformat']
let g:formatters_python=['yapf']
let g:formatters_javascript=['clangformat']
let g:formatdef_jsbeautify_json= "'js-beautify --indent-size '.&shiftwidth.' -wrap-line-length 80 --brea-chainged-methods --jslint-happy'"
let g:formatters_json=['jsbeautify_json']
let g:autoformat_autoindent=0
let g:autoformat_retab=0
let g:autoformat_remove_trailing_spaces=0
noremap <Leader>a :Autoformat<CR>
" }}}

" chrisbra/SudoEdit.vim {{{
" }}}

" christoomey/vim-tmux-navigator {{{
" }}}

" easymotion/vim-easymotion {{{
let g:EasyMotion_keys = 'asdghklqwertyuiopzxcvbnmfjop'
let g:EasyMotion_do_mapping = 0 " Disable default mappings
let g:EasyMotion_smartcase = 1
nmap s <Plug>(easymotion-overwin-f2)
map  <Leader>/ <Plug>(easymotion-sn)
omap <Leader>/ <Plug>(easymotion-tn)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
" }}}

" edkolev/tmuxline.vim {{{
let g:tmuxline_powerline_separators = 0
" :TmuxlineSnapShot [file] "For tmux to source a snapshot file
" }}}

" elzr/vim-json {{{
let g:vim_json_syntax_conceal = 0
" }}}

" jistr/vim-nerdtree-tabs {{{
let g:nerdtree_tabs_open_on_new_tab = 0
let g:nerdtree_tabs_synchronize_view = 1
" }}}

" junegunn/fzf, junegunn/fzf'.vim {{{
let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Statement'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'ToDo'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
command! -bang -nargs=* Rl call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --smart-case --hidden --follow --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
command! -bang -nargs=* Rf call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --smart-case --hidden --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
command! -bang -nargs=* R call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --smart-case --hidden --color "always" -- '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
command! -bang -nargs=* Rc call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --smart-case --hidden --color "always" -- '.shellescape(<q-args>).expand('<cword>').'| tr -d "\017"', 1, <bang>0)
noremap <leader>p :Files<CR>
noremap <leader>b :Buffers<CR>
noremap <leader>i :Lines<CR>
noremap <leader><leader> :BLines<CR>
noremap <leader>v :call fzf#vim#buffer_lines(expand('<cword>'))<CR>
noremap <leader>t :Tags<CR>
noremap <leader>y :call fzf#vim#tags(expand('<cword>'))<CR>
" }}}

" kshenoy/vim-signature {{{
let g:SignatureMarkTextHLDynamic = 1
let g:SignatureMarkerTextHLDynamic = 1
" }}}

" majutsushi/tagbar {{{
nnoremap <silent><S-Tab> :TagbarToggle<CR>
" }}}

" mattn/emmet-vim {{{
" }}}

" mbbill/undotree {{{
nnoremap <silent><leader>u :UndotreeToggle<cr>
" }}}

" indentLine {{{
let g:indentLine_enabled = 0
let g:indentLine_leadingSpaceEnabled = 0
let g:indentLine_char="┊"
noremap <Leader>ig :IndentLinesToggle<CR>
au FileType python let g:indentLine_enabled = 1
" }}}

" rhysd/clever-f.vim {{{
" }}}

" octol/vim-cpp-enhanced-highlight {{{
let g:cpp_class_scope_highlight = 1
"let g:cpp_experimental_template_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_concepts_highlight = 1
" }}}

"scrooloose/nerdcommenter {{{
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDAltDelims_java = 1
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
"}}}

" terryma/vim-multiple-cursors {{{
let g:multi_cursor_use_default_mapping=0
" }}}

" Valloric/YouCompleteMe {{{
let g:ycm_python_binary_path = 'python'
let g:ycm_complete_in_strings = 1
let g:ycm_min_num_of_chars_for_completion=2
let g:ycm_goto_buffer_command = 'horizontal-split'
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_global_ycm_extra_conf='~/dotfiles/resource/ycm_extra_conf.py'
noremap gd :YcmCompleter GoTo<CR>
" }}}

" vim-airline/vim-airline {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 0
" }}}

" vim-airline/airline_themes {{{
" let g:airline_theme='one'
" }}}

" vim-markdown {{{
let g:vim_markdown_conceal=0
" }}}
" 'wesleyche/SrcExpl' {{{
" }}}

" vim-syntastic/syntastic {{{
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'
let g:syntastic_python_pylint_args = '--rcfile=~/.pylintrc'
nnoremap <silent> <F7> :SyntasticToggleMode<CR>
" }}}

" ChromeOS settings {{{
let g:localrc_project_root = '~/cros/src/platform/factory'
call localrc#load()
" }}}
