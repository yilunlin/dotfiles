set nocompatible
filetype off
" installed plugins {{{
call plug#begin('~/.vim/plugged')
Plug 'AndrewRadev/linediff.vim'
Plug 'Chiel92/vim-autoformat'
Plug 'PhilRunninger/nerdtree-visual-selection'
Plug 'Yggdroot/indentLine'
Plug 'airblade/vim-gitgutter'
Plug 'astrangerloop/neverland-vim-theme'
Plug 'ayu-theme/ayu-vim'
Plug 'bogado/file-line'
Plug 'chrisbra/SudoEdit.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'danro/rename.vim'
Plug 'dpelle/vim-LanguageTool'
Plug 'easymotion/vim-easymotion'
Plug 'edkolev/tmuxline.vim'
Plug 'elzr/vim-json'
Plug 'godlygeek/tabular'
Plug 'hail2u/vim-css3-syntax'
Plug 'honza/vim-snippets'
Plug 'hzchirs/vim-material'
Plug 'itspriddle/ZoomWin'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'jreybert/vimagit'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/gv.vim'
Plug 'junegunn/vim-easy-align'
Plug 'jyelloz/vim-dts-indent'
Plug 'kien/rainbow_parentheses.vim'
Plug 'kshenoy/vim-signature'
Plug 'ledesmablt/vim-run'
Plug 'majutsushi/tagbar'
Plug 'mattn/emmet-vim'
Plug 'mattn/webapi-vim'
Plug 'mbbill/undotree'
Plug 'morhetz/gruvbox'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'pangloss/vim-javascript'
Plug 'plasticboy/vim-markdown'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'rhysd/clever-f.vim'
Plug 'rhysd/vim-grammarous'
Plug 'roxma/vim-paste-easy'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'universal-ctags/ctags'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/YankRing.vim'
Plug 'vim-scripts/matchit.zip'
call plug#end()
" }}}

" {{{
if !empty(glob('/usr/share/vim/google/default.vim'))
	source /usr/share/vim/google/default.vim
endif
" }}}

set noerrorbells
set novisualbell
set t_vb=
set tm=500
set wildignore=*.o,*.class,*.pyc
set wildmenu
set ruler
set ignorecase
set smartcase
set hlsearch
set incsearch
set colorcolumn=80
set nobackup
set nofoldenable
set lazyredraw
set cursorline
set cursorcolumn
set nu
set magic
set showmatch
set mat=2
set backspace=2
set ffs=unix,dos,mac
set grepprg=rg\ --vimgrep
" cache settings {{{
set backupdir=~/.vimfile/backup//
set directory=~/.vimfile/swap//
set undodir=~/.vimfile/undo//
set noswapfile
" }}}
" encoding {{{
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,big5,gb2312,latin1
" }}}
syntax on
if $COLORTERM ==# 'gnome-terminal'
	set t_Co=256
endif
if has('gui_running')
	" set t_Co=256
	set background=dark
else
	set background=dark
endif
" Tab Setting {
set smarttab
set shiftwidth=2
set tabstop=2
set softtabstop=2
set expandtab
inoremap <S-Tab> <C-V><Tab>
" }
set autoindent
set smartindent
set wrap
set list
set listchars=tab:→\ ,trail:·,nbsp:¬,precedes:«,extends:»
set laststatus=2

" custom mappings {{{
let mapleader=' '
let g:mapleader=' '
noremap 0 ^
noremap ^ 0
" visual up/down move
nnoremap j gj
nnoremap k gk
" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
" shift between tabs
map <S-H> gT
map <S-L> gt
noremap <Leader>w :w<CR>
" redraw
noremap <Leader>r :redraw!<CR>
" open quickfix/location-list window
noremap <Leader>q :cwindow<CR>
noremap <Leader>c :lwindow<CR>
" }}}

" cscope commands {{{
command Cs !cscope -Rbqk
set cscopetag
set csto=0

if filereadable('cscope.out')
	cs add cscope.out
elseif $CSCOPE_DB !=# ''
	cs add $CSCOPE_DB
endif
set cscopeverbose

" Silent the cscope update infomration on every save
let g:cscope_silent=1

nmap <Leader>fs :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>fg :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>fc :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>ft :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>fe :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>ff :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <Leader>fi :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <Leader>fd :cs find d <C-R>=expand("<cword>")<CR><CR>

" }}}

" filetype settings {{{
au BufNewFile,BufRead Dockerfile.* set filetype=dockerfile
au BufNewFile,BufRead *.log,*_log,dmesg,log :set filetype=log
au BufNewFile,BufRead Makefile.*,toolchain.inc :set filetype=make
au BufNewFile,BufRead *.dtsi,project.overlay :set filetype=dts
au BufNewFile,BufRead Kconfig.*,project.conf :set filetype=kconfig

au FileType python set shiftwidth=4 tabstop=2 softtabstop=2 expandtab
au FileType vim set shiftwidth=4 tabstop=4 softtabstop=4 noexpandtab
au FileType sh set shiftwidth=2 tabstop=2 softtabstop=2 expandtab
au FileType c,cpp,make,ld,cmake set shiftwidth=8 tabstop=8 softtabstop=8 noexpandtab
au FileType json set shiftwidth=2 tabstop=2 softtabstop=2 expandtab
au FileType dts set shiftwidth=8 tabstop=8 softtabstop=8 noexpandtab
au FileType kconfig set shiftwidth=8 tabstop=8 softtabstop=8 noexpandtab
autocmd FileType markdown setlocal spell complete+=kspell
autocmd FileType gitcommit setlocal spell complete+=kspell
" }}}

" airblade/vim-gitgutter {{{
function! NextHunkAllBuffers()
	let line=line('.')
	GitGutterNextHunk
	if line('.') != line
		return
	endif

	let bufnr=bufnr('')
	while 1
		bnext
		if bufnr('') == bufnr
			return
		endif
		if !empty(GitGutterGetHunks())
			normal! 1G
			GitGutterNextHunk
			return
		endif
	endwhile
endfunction

function! PrevHunkAllBuffers()
	let line=line('.')
	GitGutterPrevHunk
	if line('.') != line
		return
	endif

	let bufnr=bufnr('')
	while 1
		bprevious
		if bufnr('') == bufnr
			return
		endif
		if !empty(GitGutterGetHunks())
			normal! G
			GitGutterPrevHunk
			return
		endif
	endwhile
endfunction

nmap <Leader>ga <Plug>(GitGutterStageHunk)
nmap <Leader>gu <Plug>(GitGutterUndoHunk)
vmap <Leader>ga <Plug>(GitGutterStageHunk)
vmap <Leader>gu <Plug>(GitGutterUndoHunk)
nmap <Leader>gp <Plug>(GitGutterPreviewHunk)
nmap <Leader>gf :GitGutterFold<CR>
nmap <Leader>gt :GitGutterToggle<CR>
nmap <Leader>M :call PrevHunkAllBuffers()<CR>
nmap <Leader>m  <Plug>(GitGutterPrevHunk)
nmap <Leader>N :call NextHunkAllBuffers()<CR>
nmap <Leader>n  <Plug>(GitGutterNextHunk)
" Update signs on saving
autocmd BufWritePost * GitGutter
" }}}
"
" NeoSolarized {{{
let g:gruvbox_contrast_dark="hard"
let g:gruvbox_contrast_light="hard"
let g:gruvbox_improved_warnings=1
color gruvbox
" }}}

" EasyAlign {{{
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
" }}}

" Chiel92/vim-autoformat {{{
let g:formatdef_yapf="'yapf --style=\"{based_on_style:google,indent_width:'.&shiftwidth.(&textwidth ? ',column_limit:'.&textwidth : '').',ALLOW_MULTILINE_LAMBDAS: true, I18N_FUNCTION_CALL: func_not__exist}\" -l '.a:firstline.'-'.a:lastline"
let g:formatters_c=['clangformat']
let g:formatters_python=['black', 'yapf']
let g:formatters_javascript=['clangformat']
let g:formatdef_jsbeautify_json= "'js-beautify --indent-size '.&shiftwidth.' -wrap-line-length 80 --brea-chainged-methods --jslint-happy'"
let g:formatdef_cmake_format= '"cmake-format - --first-comment-is-literal --tab-size ".shiftwidth()." ".(&textwidth ? "--line-width=".&textwidth : "")'
let g:formatters_json=['jsbeautify_json']
let g:autoformat_autoindent=0
let g:autoformat_retab=0
let g:autoformat_remove_trailing_spaces=0
noremap <Leader>fa :Autoformat<CR>
" }}}

" easymotion/vim-easymotion {{{
let g:EasyMotion_keys='asdghklqwertyuiopzxcvbnmfjop'
let g:EasyMotion_do_mapping=0 " Disable default mappings
let g:EasyMotion_smartcase=1
nmap s <Plug>(easymotion-overwin-f2)
map  <Leader>/ <Plug>(easymotion-sn)
omap <Leader>/ <Plug>(easymotion-tn)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
" }}}

" edkolev/tmuxline.vim {{{
let g:tmuxline_powerline_separators=0
" :TmuxlineSnapShot [file] "For tmux to source a snapshot file
" }}}

" elzr/vim-json {{{
let g:vim_json_syntax_conceal=0
" }}}

" languageTool {{{

let g:languagetool_jar='/usr/local/google/home/yllin/tools/LanguageTool-5.9-stable/languagetool-commandline.jar'
" }}}

" jistr/vim-nerdtree-tabs {{{
let g:nerdtree_tabs_open_on_new_tab=0
let g:nerdtree_tabs_synchronize_view=1
nnoremap <Leader><C-n> :NERDTree<CR>
nnoremap <Leader><C-t> :NERDTreeToggle<CR>
nnoremap <Leader><C-f> :NERDTreeFind<CR>
" }}}

" junegunn/fzf, junegunn/fzf'.vim {{{
let g:fzf_history_dir='~/.local/share/fzf-history'
let g:fzf_action={
			\ 'ctrl-t': 'tab split',
			\ 'ctrl-x': 'split',
			\ 'ctrl-v': 'vsplit' }
" gruvbox color
let g:fzf_colors =
			\ { 'fg':      ['fg', 'Normal'],
			\ 'bg':      ['bg', 'Normal'],
			\ 'hl':      ['fg', 'Comment'],
			\ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
			\ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
			\ 'hl+':     ['fg', 'Statement'],
			\ 'info':    ['fg', 'PreProc'],
			\ 'border':  ['fg', 'Ignore'],
			\ 'prompt':  ['fg', 'Conditional'],
			\ 'pointer': ['fg', 'Exception'],
			\ 'marker':  ['fg', 'Keyword'],
			\ 'spinner': ['fg', 'Label'],
			\ 'header':  ['fg', 'Comment'] }

command! -bang -nargs=* Rl call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --smart-case --hidden --follow --color "always" '.shellescape(<q-args>)'| tr -d "\017"', 1, <bang>0)
command! -bang -nargs=* Rf call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --smart-case --hidden --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
command! -bang -nargs=* R call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --smart-case --hidden --color "always" -- '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
command! -bang -nargs=* Rc call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --smart-case --hidden --color "always" -- '.shellescape(<q-args>).expand('<cword>').'| tr -d "\017"', 1, <bang>0)
command! -bang -nargs=* Rs call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --smart-case --hidden --color "always" -- '.shellescape(<q-args>).expand(GetPartialWord()).'| tr -d "\017"', 1, <bang>0)
noremap <Leader>p :Files<CR>
noremap <Leader>p :Files<CR>
noremap <Leader>o :GFiles<CR>
noremap <Leader>b :Buffers<CR>
noremap <Leader>i :Lines<CR>
noremap <Leader><Leader> :BLines<CR>
noremap <Leader>v :call fzf#vim#buffer_lines(expand('<cword>'))<CR>
noremap <Leader>t :Tags<CR>
noremap <Leader>y :call fzf#vim#tags(expand('<cword>'))<CR>
" }}}

" osc52' {{{
source ~/dotfiles/vim/autoload/osc52.vim
vmap <C-c> y:call SendViaOSC52(getreg('"'))<cr>
"}}}

" rainbow_parentheses.vim{{{
let g:rbpt_max=16
let g:rbpt_loadcmd_toggle=0
" Auto Enable
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
" }}}

" kshenoy/vim-signature {{{
let g:SignatureMarkTextHLDynamic=1
let g:SignatureMarkerTextHLDynamic=1

" coc {{{
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" TextEdit might fail if hidden is not set.
"set hidden

" Don't pass messages to |ins-completion-menu|.
"set shortmess+=c

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
			\ coc#pum#visible() ? coc#pum#next(1) :
			\ CheckBackspace() ? "\<Tab>" :
			\ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
			\: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
	let col = col('.') - 1
	return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! GetPartialWord() abort
    let l:col = col('.') " Get current column position
    let l:end_col = matchend(getline('.'), '\k\+', l:col - 1) " Find end of word
    return strpart(getline('.'), l:col - 1, l:end_col - l:col + 1) 
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
	inoremap <silent><expr> <c-space> coc#refresh()
else
	inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> gk <Plug>(coc-diagnostic-prev)
nmap <silent> gj <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
	if CocAction('hasProvider', 'hover')
		call CocActionAsync('doHover')
	else
		call feedkeys('K', 'in')
	endif
endfunction

augroup mygroup
	autocmd!
	" Update signature help on jump placeholder.
	autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
	nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
	nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
	inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
	inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
	vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
	vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>


" }}}

" easycomplete {{{
"noremap gr :EasyCompleteReference<CR>
"noremap gd :EasyCompleteGotoDefinition<CR>
"noremap rn :EasyCompleteRename<CR>
"noremap gb :BackToOriginalBuffer<CR>
"
"nnoremap <silent>gj :EasyCompleteNextDiagnostic<CR>
"nnoremap <silent>gk :EasyCompletePreviousDiagnostic<CR>
"let g:easycomplete_diagnostics_enable = 1
"
"let g:easycomplete_sign_text = {
"			\   'error':       "◉",
"			\   'warning':     "▲",
"			\   'information': '◎',
"			\   'hint':        '▧'
"			\ }
"let g:easycomplete_colorful = 1
" AI suggest for coding.
"let g:easycomplete_tabnine_config = {
"			\ 'line_limit': 1000,
"			\ 'max_num_result' : 10,
"			\ }
"let g:easycomplete_tabnine_enable = 1
"let g:easycomplete_diagnostics_render_delay = 100
"}}}

" majutsushi/tagbar {{{
nnoremap <S-tab> :TagbarToggle<CR>
" }}}

" mattn/emmet-vim {{{
" }}}

" mbbill/undotree {{{
nnoremap <silent><Leader>u :UndotreeToggle<cr>
" }}}

" indentLine {{{
let g:indentLine_enabled=0
let g:indentLine_leadingSpaceEnabled=0
let g:indentLine_char='┊'
noremap <Leader>ig :IndentLinesToggle<CR>
au FileType python let g:indentLine_enabled=1
" }}}

" rhysd/clever-f.vim {{{
let g:clever_f_smart_case=1
" }}}

"scrooloose/nerdcommenter {{{
let g:NERDSpaceDelims=1
let g:NERDCompactSexyComs=1
let g:NERDDefaultAlign='left'
let g:NERDAltDelims_java=1
let g:NERDCustomDelimiters={ 'c': { 'left': '/**','right': '*/' } }
let g:NERDCommentEmptyLines=1
let g:NERDTrimTrailingWhitespace=1
"}}}

" vim-airline/vim-airline {{{
let g:airline#extensions#tabline#enabled=1
let g:airline_powerline_fonts=0
" fix characters in hterm unaligned on some fonts
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.maxlinenr=' '
let g:airline_symbols.linenr='%'
let g:airline_symbols.paste='ρ'
let g:airline_symbols.branch='B'
let g:airline_symbols.whitespace=' '
" }}}

" vim-airline/airline_themes {{{
" }}}

" vim-markdown {{{
let g:vim_markdown_conceal=0
" }}}
"
" vim-run {{{
let g:rundir='~/.vim/rundir'
let g:run_shell=$SHELL
let g:run_use_loclist=0
let g:run_quiet_default=0
let g:run_autosave_logs=0
let g:run_nostream_default=0
let g:run_browse_default_limit=10
" }}}

" 'wesleyche/SrcExpl' {{{
" }}}

" vim-syntastic/syntastic {{{
let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_c_include_dirs=['../../include','../include', './include']
let g:syntastic_c_check_header=0
let g:syntastic_c_remove_include_errors=1
let g:syntastic_check_on_wq=0
let g:syntastic_cpp_check_header=1
let g:syntastic_cpp_compiler='clang++'
let g:syntastic_cpp_compiler_options=' -std=c++11 -stdlib=libc++'
let g:syntastic_cpp_remove_include_errors=1
let g:syntastic_c_config_file='.syntastic_c_config_file'
let g:syntastic_mode_map={
			\ 'mode': 'passive',
			\ 'passive_filetypes': ['asm'] }
nnoremap <silent> <F7> :SyntasticToggleMode<CR>
" }}}

" ZoomWin {{{
nmap <Leader>z <C-w>o
" }}}

" ChromeOS settings {{{
function! SetKernel()
	set noexpandtab
	set shiftwidth=8 tabstop=8 softtabstop=8
endfunction

function! SetLocalRC()
	let g:localrc_project_root='~/cros/src/platform/factory'
	call localrc#load()
endfunction

augroup dirdetect
	au BufNewFile,BufRead */{coreboot,depthcharge,kernel,ec}/* call SetKernel()
	au BufNewFile,BufRead */factory/* call SetLocalRC()
augroup END
" }}}
let g:localrc_project_root=''
call localrc#load()
